<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create
obj_detected = false;
item_type = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy

//Explode variables
// Changeable Variables
var max_life = 30;
var min_life = 10;
var max_speed = 10;
var min_speed = 5;
var max_peice_size = 8;
var min_peice_size = 8;
var spin = 5;
var fade = 0;
var fade_amt = 0;
var fade_to_color = 1;
var end_color = 0;
var end_color_display = c_white;
var color_fade_speed = 0;
var implode = -1;


scr_sprite_explode(max_life, min_life, max_speed, min_speed, max_peice_size, min_peice_size, spin, fade, fade_amt, fade_to_color, end_color_display, color_fade_speed, implode);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// see if any need to move down

var obj_to_test = instance_place(x, y + obj_gameboard.spr_size, obj_parent_destructable);        
if (obj_to_test == noone &amp;&amp; obj_gameboard.max_y &gt;= y + obj_gameboard.spr_size) {
    y = y + obj_gameboard.spr_size;
    obj_gameboard.has_moved = true;
    obj_gameboard.has_killed = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wake and check for matches
//see if the next item needs killin'

var obj_to_test = instance_place(x, y + obj_gameboard.spr_size, obj_parent_destructable);        
if (obj_to_test != noone &amp;&amp; obj_to_test != self) {
    show_debug_message(scr_get_name(item_type) + " vs " + scr_get_name(obj_to_test.item_type));    
    var should_kill = scr_item_beats_item(item_type, obj_to_test.item_type);
    show_debug_message(string(should_kill));
    if (should_kill) {
        with(obj_to_test) {
            instance_destroy();
        }
        y = y + obj_gameboard.spr_size;
        obj_gameboard.has_killed = true;
    } else {
        obj_gameboard.has_moved = false;    
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///step event, check for stuff to destroy
//destory alarm
if (alarm[0] == -1 &amp;&amp; obj_gameboard.has_moved) {
    alarm[0] = 5;    
}

if (alarm[1] == -1 &amp;&amp; obj_gameboard.has_killed) {
    alarm[1] = 5;    
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///global mouse up to trap non-drags

if (obj_detected == false &amp;&amp; obj_gameboard.current_item != noone) {
    //we are not on an object, lets release
    obj_gameboard.current_item.image_blend = c_white;
    obj_gameboard.current_item = noone;
}

obj_detected = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///swap objects if possible
obj_detected = true;
if (obj_gameboard.current_item == self) {
    obj_gameboard.current_item = noone;
    var obj_to_test = instance_place(x, y + obj_gameboard.spr_size, obj_parent_destructable);        
    if (obj_to_test != noone &amp;&amp; obj_to_test != self) {
        show_debug_message(scr_get_name(item_type) + " vs " + scr_get_name(obj_to_test.item_type));    
    }
    image_blend = c_white;
} else if (obj_gameboard.current_item != self &amp;&amp; obj_gameboard.current_item != noone) {
    var xdiff = x - obj_gameboard.current_item.x;
    var ydiff = y - obj_gameboard.current_item.y;
    show_debug_message("xdiff: " + string(xdiff) + " ydiff: " + string(ydiff));
    if ((abs(xdiff) == obj_gameboard.spr_size || abs(ydiff) == obj_gameboard.spr_size) &amp;&amp; abs(xdiff) != abs(ydiff)) {
        var newx = x;
        var newy = y;
        //set local object traits
        x = obj_gameboard.current_item.x;
        y = obj_gameboard.current_item.y;        
        
        //set selected item traits
        obj_gameboard.current_item.x = newx;
        obj_gameboard.current_item.y = newy;
        
        //de-select item
        obj_gameboard.current_item.image_blend = c_white;
        obj_gameboard.current_item = noone;    
        image_blend = c_white;
        obj_gameboard.has_moved = true;
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//pressed

if (obj_gameboard.current_item == self) {
    obj_gameboard.current_item = noone;
    image_blend = c_white;
} else if (obj_gameboard.current_item == noone) {
    obj_gameboard.current_item = self;
    image_blend = c_purple;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
draw_self();
//draw_text(x - 16,y -16,string(x));
draw_text(x - 16,y,string(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
