<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create
current_item = noone;
has_moved = false;
has_killed = false;
has_changed = false;
spawning = false;
disable_r_junk = false;
disable_p_junk = true;
disable_s_junk = false;
chain_count = 0;


//Marquee 
show_debug_message("changing to yellow goal");
level_goal = "Destroy all of the Yellow bricks...";
start_letter = 0;
marquee_length = 15;
type_rate = 3/room_speed; // 3 char per second
marquee_scrolling = true;

//choose the level
switch (obj_player_score.level) {
    case 1:
        scr_level_1();
        break;
    case 2:
        scr_level_2();
        break;
    case 3:
        scr_level_3();
        break;
    case 4:
        scr_level_4();
        break;
    case 5:
        scr_level_5();
        break;
    case 6:
        scr_level_6();
        break;
    case 7:
        scr_level_7();
        break;        
    default:
        scr_level_endless();
        break;        
}




//set the grid width and height (number of objects)
grid_width = 10;
grid_height = 15;
spr_size = 64;
max_y = spr_size * (grid_height + 1);

for (var b = spr_size * 2; b &lt;= spr_size * (grid_width + 1); b+= spr_size) {
    instance_create(b, 2*spr_size, obj_spawn_box);         
}

randomize();
for (var i = 0; i &lt; grid_width; i++) {
    for (var j = 0; j &lt; grid_height; j++) {
        switch irandom(5) + 1 {
            case JUNK:
                new_obj = instance_create(2 * spr_size + i * spr_size, 2 * spr_size + j * spr_size, obj_junk);     
                new_obj.item_type = JUNK;
                break;    
            case ROCK:
                new_obj = instance_create(2 * spr_size + i * spr_size, 2 * spr_size + j * spr_size, obj_rock);     
                new_obj.item_type = ROCK;
                break;
            case PAPER:
                new_obj = instance_create(2 * spr_size + i * spr_size, 2 * spr_size + j * spr_size, obj_paper);     
                new_obj.item_type = PAPER;
                break;
            case SCISSORS:
                new_obj = instance_create(2 * spr_size + i * spr_size, 2 * spr_size + j * spr_size, obj_scissors);     
                new_obj.item_type = SCISSORS;
                break;
            case ROCK_JUNK:
                new_obj = instance_create(2 * spr_size + i * spr_size, 2 * spr_size + j * spr_size, obj_r_junk);     
                new_obj.item_type = ROCK_JUNK;
                break;
            case PAPER_JUNK:
                new_obj = instance_create(2 * spr_size + i * spr_size, 2 * spr_size + j * spr_size, obj_p_junk);     
                new_obj.item_type = PAPER_JUNK;
                break;
            case SCISSORS_JUNK:
                new_obj = instance_create(2 * spr_size + i * spr_size, 2 * spr_size + j * spr_size, obj_s_junk);     
                new_obj.item_type = SCISSORS_JUNK;
                break;
        }        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset the changed variable
obj_gameboard.has_moved = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///step
if (alarm[0] == -1) {
    alarm[0] = 60;
}

if (scr_won_level()) {
    obj_player_score.level++;
    room_restart();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw gui
var xx = (display_get_gui_width() div 4);
var yy = (display_get_gui_height() div 5) * 4;

draw_set_color(c_ltgray); //Set the color to light gray for our background
draw_rectangle(.1*spr_size, yy - spr_size, display_get_gui_width() - spr_size *4
                , display_get_gui_height() - spr_size, false);


scr_draw_with_shadow(xx, yy - spr_size/2, string(obj_player_score.r_junk_broken));
draw_sprite_ext(spr_r_junk, 0, xx - spr_size, yy, 1, 1, 0, c_white, 1);
scr_draw_with_shadow(xx, yy + spr_size/2, string(obj_player_score.p_junk_broken));
draw_sprite_ext(spr_p_junk, 0, xx - spr_size, yy  + spr_size, 1, 1, 0, c_white, 1);
scr_draw_with_shadow(xx, yy + spr_size * 1.5, string(obj_player_score.s_junk_broken));
draw_sprite_ext(spr_s_junk, 0, xx - spr_size, yy  + spr_size *2, 1, 1, 0, c_white, 1);


scr_draw_with_shadow(xx*2, yy - spr_size/2, string(obj_player_score.level));
draw_sprite_ext(spr_junk, 0, xx*2 - spr_size, yy, 1, 1, 0, c_white, 1);
scr_draw_with_shadow(xx*2, yy + spr_size/2, string(obj_player_score.level));
draw_sprite_ext(spr_junk, 0, xx*2 - spr_size, yy + spr_size, 1, 1, 0, c_white, 1);
scr_draw_with_shadow(xx*2, yy + spr_size*1.5, string(obj_player_score.level));
draw_sprite_ext(spr_junk, 0, xx*2 - spr_size, yy + spr_size *2, 1, 1, 0, c_white, 1);



if (marquee_scrolling){
    var str_to_display = string_copy(level_goal, start_letter, ceil(start_letter + marquee_length));
    if (string_length(str_to_display) &lt; marquee_length) {
        str_to_display += string_copy(level_goal, 0, marquee_length - string_length(str_to_display));
    }
    scr_draw_with_shadow(spr_size*2, spr_size/2, str_to_display);
    start_letter += type_rate;
    if (start_letter &gt; string_length(level_goal)) {
        start_letter = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
